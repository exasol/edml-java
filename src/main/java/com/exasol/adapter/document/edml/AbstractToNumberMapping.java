// Generated by delombok at Tue Feb 14 11:27:09 CET 2023
package com.exasol.adapter.document.edml;

import lombok.Builder;
// sonar can't deal with Lombok
/**
 * Abstract base for EDML mappings that map to a numeric Exasol column.
 */
@SuppressWarnings("java:S1170")
public abstract class AbstractToNumberMapping extends AbstractToColumnMapping {
    private final MappingErrorBehaviour overflowBehaviour;
    private final ConvertableMappingErrorBehaviour notNumericBehaviour;


    /**
     * Builder class. The content of the builder is generated by lombok. We need this class declared here since the
     * Javadoc generation fails otherwise.
     *
     * @param <C> type used by lombok
     * @param <B> type used by lombok
     */
    public static abstract class AbstractToNumberMappingBuilder<C extends AbstractToNumberMapping, B extends AbstractToNumberMappingBuilder<C, B>> extends AbstractToColumnMappingBuilder<C, B> {
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private boolean overflowBehaviour$set;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private MappingErrorBehaviour overflowBehaviour$value;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private boolean notNumericBehaviour$set;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private ConvertableMappingErrorBehaviour notNumericBehaviour$value;

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        protected abstract B self();

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public abstract C build();

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public B overflowBehaviour(final MappingErrorBehaviour overflowBehaviour) {
            this.overflowBehaviour$value = overflowBehaviour;
            overflowBehaviour$set = true;
            return self();
        }

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public B notNumericBehaviour(final ConvertableMappingErrorBehaviour notNumericBehaviour) {
            this.notNumericBehaviour$value = notNumericBehaviour;
            notNumericBehaviour$set = true;
            return self();
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public java.lang.String toString() {
            return "AbstractToNumberMapping.AbstractToNumberMappingBuilder(super=" + super.toString() + ", overflowBehaviour$value=" + this.overflowBehaviour$value + ", notNumericBehaviour$value=" + this.notNumericBehaviour$value + ")";
        }
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    private static MappingErrorBehaviour $default$overflowBehaviour() {
        return MappingErrorBehaviour.ABORT;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    private static ConvertableMappingErrorBehaviour $default$notNumericBehaviour() {
        return ConvertableMappingErrorBehaviour.ABORT;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected AbstractToNumberMapping(final AbstractToNumberMapping.AbstractToNumberMappingBuilder<?, ?> b) {
        super(b);
        if (b.overflowBehaviour$set) this.overflowBehaviour = b.overflowBehaviour$value;
         else this.overflowBehaviour = AbstractToNumberMapping.$default$overflowBehaviour();
        if (b.notNumericBehaviour$set) this.notNumericBehaviour = b.notNumericBehaviour$value;
         else this.notNumericBehaviour = AbstractToNumberMapping.$default$notNumericBehaviour();
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof AbstractToNumberMapping)) return false;
        final AbstractToNumberMapping other = (AbstractToNumberMapping) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (!super.equals(o)) return false;
        final java.lang.Object this$overflowBehaviour = this.getOverflowBehaviour();
        final java.lang.Object other$overflowBehaviour = other.getOverflowBehaviour();
        if (this$overflowBehaviour == null ? other$overflowBehaviour != null : !this$overflowBehaviour.equals(other$overflowBehaviour)) return false;
        final java.lang.Object this$notNumericBehaviour = this.getNotNumericBehaviour();
        final java.lang.Object other$notNumericBehaviour = other.getNotNumericBehaviour();
        if (this$notNumericBehaviour == null ? other$notNumericBehaviour != null : !this$notNumericBehaviour.equals(other$notNumericBehaviour)) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof AbstractToNumberMapping;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = super.hashCode();
        final java.lang.Object $overflowBehaviour = this.getOverflowBehaviour();
        result = result * PRIME + ($overflowBehaviour == null ? 43 : $overflowBehaviour.hashCode());
        final java.lang.Object $notNumericBehaviour = this.getNotNumericBehaviour();
        result = result * PRIME + ($notNumericBehaviour == null ? 43 : $notNumericBehaviour.hashCode());
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "AbstractToNumberMapping(super=" + super.toString() + ", overflowBehaviour=" + this.getOverflowBehaviour() + ", notNumericBehaviour=" + this.getNotNumericBehaviour() + ")";
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public MappingErrorBehaviour getOverflowBehaviour() {
        return this.overflowBehaviour;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public ConvertableMappingErrorBehaviour getNotNumericBehaviour() {
        return this.notNumericBehaviour;
    }
}
