// Generated by delombok at Tue Feb 14 11:27:09 CET 2023
package com.exasol.adapter.document.edml;

import lombok.Builder;
// sonar can't deal with Lombok
/**
 * Abstract base for EDML mappings that map to an Exasol {@code VARCHAR} column.
 */
@SuppressWarnings("java:S1170")
public abstract class AbstractToVarcharColumnMapping extends AbstractToColumnMapping {
    private final int varcharColumnSize;


    /**
     * Builder class. The content of the builder is generated by lombok. We need this class declared here since the
     * Javadoc generation fails otherwise.
     *
     * @param <C> type used by lombok
     * @param <B> type used by lombok
     */
    public static abstract class AbstractToVarcharColumnMappingBuilder<C extends AbstractToVarcharColumnMapping, B extends AbstractToVarcharColumnMappingBuilder<C, B>> extends AbstractToColumnMappingBuilder<C, B> {
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private boolean varcharColumnSize$set;
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        private int varcharColumnSize$value;

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        protected abstract B self();

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public abstract C build();

        /**
         * @return {@code this}.
         */
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public B varcharColumnSize(final int varcharColumnSize) {
            this.varcharColumnSize$value = varcharColumnSize;
            varcharColumnSize$set = true;
            return self();
        }

        @java.lang.Override
        @java.lang.SuppressWarnings("all")
        @lombok.Generated
        public java.lang.String toString() {
            return "AbstractToVarcharColumnMapping.AbstractToVarcharColumnMappingBuilder(super=" + super.toString() + ", varcharColumnSize$value=" + this.varcharColumnSize$value + ")";
        }
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    private static int $default$varcharColumnSize() {
        return 254;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected AbstractToVarcharColumnMapping(final AbstractToVarcharColumnMapping.AbstractToVarcharColumnMappingBuilder<?, ?> b) {
        super(b);
        if (b.varcharColumnSize$set) this.varcharColumnSize = b.varcharColumnSize$value;
         else this.varcharColumnSize = AbstractToVarcharColumnMapping.$default$varcharColumnSize();
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public boolean equals(final java.lang.Object o) {
        if (o == this) return true;
        if (!(o instanceof AbstractToVarcharColumnMapping)) return false;
        final AbstractToVarcharColumnMapping other = (AbstractToVarcharColumnMapping) o;
        if (!other.canEqual((java.lang.Object) this)) return false;
        if (!super.equals(o)) return false;
        if (this.getVarcharColumnSize() != other.getVarcharColumnSize()) return false;
        return true;
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    protected boolean canEqual(final java.lang.Object other) {
        return other instanceof AbstractToVarcharColumnMapping;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int hashCode() {
        final int PRIME = 59;
        int result = super.hashCode();
        result = result * PRIME + this.getVarcharColumnSize();
        return result;
    }

    @java.lang.Override
    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public java.lang.String toString() {
        return "AbstractToVarcharColumnMapping(super=" + super.toString() + ", varcharColumnSize=" + this.getVarcharColumnSize() + ")";
    }

    @java.lang.SuppressWarnings("all")
    @lombok.Generated
    public int getVarcharColumnSize() {
        return this.varcharColumnSize;
    }
}
